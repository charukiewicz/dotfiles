set encoding=utf-8

" airline config
let g:airline_powerline_fonts = 1
"if empty($SSH_CLIENT)
"    let g:airline_powerline_fonts = 1
"endif
set laststatus=2

"set term=xterm-256color
" enable 256 colors
" set t_Co=256
" enable language-specific syntax highlighting
syntax enable

" hide buffers rather than close them if unsaved changes persist on buffer switch
set hidden

" enable normal backspace behavior in insert mode
set backspace=indent,eol,start


" set termguicolors
set t_Co=256
" set color theme

" The official vim colorschemes were completely remade in 2022, breaking the
" colors on many terminals, so we have our own copy of the legacy 'elflord'
" that keeps the configuration portable.
source ~/dotfiles/vim/colors/elflord-legacy.vim


" show line numbers
set number

" set tabs to have 4 spaces
set tabstop=4
set softtabstop=4

" when using the >> or << commands, shift lines by 4 spaces
set shiftwidth=4

" show the matching part of the pair for [] {} and ()
set showmatch

" search as characters are entered
set incsearch

" highlight matches
set hlsearch

" leader is comma
let mapleader=","

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

"enable folding
set foldenable

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" tabs turn into spaces
set expandtab

" indent when moving to the next line
set autoindent
set pastetoggle=<leader>p

" highlight the line that the cursor/column is on
hi CursorLine   cterm=NONE ctermbg=DarkMagenta guibg=red guifg=white
hi CursorColumn cterm=NONE ctermbg=DarkMagenta guibg=red guifg=white
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>

" toggle spellcheck
:map <Leader>s :setlocal spell! spelllang=en_us<CR>

" turn on autocomplete (use with C-n or C-p in insert mode)
set complete+=kspell

" search for the text currently selected in visual mode with //
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'

" turn on NERDTree with C-n
map <C-n> :NERDTreeToggle<CR>

map <C-b> :CtrlPBuffer<CR>

" ctrl-p file ignore
set wildignore+=*.o,*.hi,*.dyn_o,*.dyn_hi,*.gz,*.zip

" open NERDTree if no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_php_checkers=['php','phpcs','phpmd']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_haskell_checkers = ['hlint']
" let b:syntastic_skip_checks = 0

map <silent> <Leader>e :Errors<CR>
map <Leader>w :SyntasticToggleMode<CR>

" Insert into your .vimrc after quick-scope is loaded.
" Obviously depends on <https://github.com/unblevable/quick-scope> being installed.

" enable quick_scope conditionally
let g:qs_enable = 0
let g:qs_enable_char_list = [ 'f', 'F', 't', 'T' ]

function! Quick_scope_selective(movement)
    let needs_disabling = 0
    if !g:qs_enable
        QuickScopeToggle
        redraw!
        let needs_disabling = 1
    endif
    let letter = nr2char(getchar())
    if needs_disabling
        QuickScopeToggle
    endif
    return a:movement . letter
endfunction

" quick_scope maps, operator-pending mode included (can do 'df' with hint)
for i in g:qs_enable_char_list
    execute 'noremap <expr> <silent>' . i . " Quick_scope_selective('". i . "')"
endfor

" Toggle hard mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Turn on hard mode by default
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

" Run a shell command via :Shell <cmd>
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

map <leader><leader> :Shell ./build<CR><CR>

"map <leader>d :bd<CR>

" sane vim window switching (switch vim windows using only Ctrl + h,j,k,l)
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" bind jj to Esc only in insert mode
imap jj <Esc>

" Elm format
"set autoread
"autocmd BufWritePost *.elm silent !elm-format --yes <afile>
"autocmd BufWritePost *.elm redraw!
autocmd BufWritePost *.elm call ElmFormat()



let g:elm_format_version = '0.19'
" Vim command to format Elm files with elm-format
function! ElmFormat() abort
	" check for elm-format
	if CheckBin('elm-format', 'https://github.com/avh4/elm-format') ==# ''
		return
	endif

	" save cursor position, folds and many other things
    let l:curw = {}
    let l:curw = winsaveview()

    " save our undo file to be restored after we are done.
    let l:tmpundofile = tempname()
    exe 'wundo! ' . l:tmpundofile

	" write current unsaved buffer to a temporary file
	let l:tmpname = tempname() . '.elm'
	call writefile(getline(1, '$'), l:tmpname)

	" call elm-format on the temporary file
    if filereadable('elm.json')
        let l:out = system('elm-format ' . l:tmpname . ' --output ' . l:tmpname)
    else
        let l:out = system('elm-format --elm-version ' . g:elm_format_version . ' ' . l:tmpname . ' --output ' . l:tmpname)
    endif

	" if there is no error
	if v:shell_error == 0
		try | silent undojoin | catch | endtry

		" replace current file with temp file, then reload buffer
		let l:old_fileformat = &fileformat
		call rename(l:tmpname, expand('%'))
		silent edit!
		let &fileformat = l:old_fileformat
		let &syntax = &syntax
	elseif g:elm_format_fail_silently == 0
		call EchoLater('EchoError', 'elm-format:', l:out)
	endif

    " save our undo history
    silent! exe 'rundo ' . l:tmpundofile
    call delete(l:tmpundofile)

	" restore our cursor/windows positions, folds, etc..
    if empty(l:curw)
      silent! loadview
    else
      call winrestview(l:curw)
    endif
endf

fun! CheckBin(bin, url) abort
  let l:binpath = substitute(a:bin, '^\s*\(.\{-}\)\s*$', '\1', '')

  if executable(l:binpath)
    return l:binpath
  endif

  call elm#util#EchoWarning('elm-vim:', 'could not find ' . l:binpath . ' [' . a:url . ']')

  return ''
endf

fun! EchoLater(func_name, title, msg) abort
  let s:echo_func_name = a:func_name
  let s:echo_title = a:title
  let s:echo_msg = a:msg
endf

" Path to directory in which to save vim sessions
let session_path="~/.vim/sessions/"

" Save vim session with given name
function! s:MakeSession(sessionStr)
    let sessionName=a:sessionStr
    :set sessionoptions=buffers
    exec "mksession " . g:session_path . sessionName . ".vim"
endf

command! -nargs=1 MakeSession call s:MakeSession(<f-args>)

" Load vim session with given name
function! s:LoadSession(sessionStr)
    let sessionName=a:sessionStr
    exec "source " . g:session_path . sessionName . ".vim"
endf

command! -nargs=1 Load call s:LoadSession(<f-args>)

" Automatically save the current session whenever vim is closed
autocmd VimLeave * exec "mksession!" g:session_path . "shutdown_session.vim"

" <F7> restores that 'shutdown session'
noremap <F7> :exe ":source " . g:session_path . "shutdown_session.vim"<CR>

let g:haskell_disable_TH = 1

function! HaskellToggleQQ() abort
    if g:haskell_disable_TH == 1
        let g:haskell_disable_TH = 0
    else
        let g:haskell_disable_TH = 1
    endif
endf

nnoremap <leader>z call HaskellToggleQQ()


" Stylish Haskell

let g:disable_haskell_format = 0

autocmd BufRead,BufNewFile *.model set filetype=haskell

autocmd BufWritePost *.hs call HaskellFormat()

" Vim command to format Elm files with elm-format
function! HaskellFormat() abort
    " check for elm-format
    if CheckBin('stylish-haskell', 'https://github.com/jaspervdj/stylish-haskell') ==# ''
        return
    endif

    if g:disable_haskell_format
        return
    endif

    " save cursor position, folds and many other things
    let l:curw = {}
    let l:curw = winsaveview()

    " save our undo file to be restored after we are done.
    let l:tmpundofile = tempname()
    exe 'wundo! ' . l:tmpundofile

    " write current unsaved buffer to a temporary file
    let l:tmpname = tempname() . '.hs'
    call writefile(getline(1, '$'), l:tmpname)

    " call elm-format on the temporary file
    let l:out = system('stylish-haskell -i ' . l:tmpname)

    " if there is no error
    if v:shell_error == 0
        try | silent undojoin | catch | endtry

        " replace current file with temp file, then reload buffer
        let l:old_fileformat = &fileformat
        call rename(l:tmpname, expand('%'))
        silent edit!
        let &fileformat = l:old_fileformat
        let &syntax = &syntax
    endif

    " save our undo history
    silent! exe 'rundo ' . l:tmpundofile
    call delete(l:tmpundofile)

    " restore our cursor/windows positions, folds, etc..
    if empty(l:curw)
      silent! loadview
    else
      call winrestview(l:curw)
    endif
endf


function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" Auto trimming of trailing whitespace
autocmd BufWritePre * call TrimTrailingWhitespace()

function! TrimTrailingWhitespace() abort

    " save cursor position, folds and many other things
    let l:curw = {}
    let l:curw = winsaveview()

    " save our undo file to be restored after we are done.
    let l:tmpundofile = tempname()
    exe 'wundo! ' . l:tmpundofile

    " trim trailing whitespace in the entire file
    silent! exe '%s/\s\+$//g'

    " save our undo history
    silent! exe 'rundo ' . l:tmpundofile
    call delete(l:tmpundofile)

    " restore our cursor/windows positions, folds, etc..
    if empty(l:curw)
      silent! loadview
    else
      call winrestview(l:curw)
    endif
endf

" Undotree
nnoremap <F5> :UndotreeToggle<CR>

nnoremap <leader>ts :tjump <C-r><C-w><CR>
nnoremap <leader>n :tnext<CR>
nnoremap <leader>b :tprevious<CR>
